<?php

/**
 * Abstract class to define/implement base methods for all controller classes
 *
 * @since      1.0.0
 * @package    Plugin_Name
 * @subpackage Plugin_Name/controllers
 *
 */

namespace Rodes\WpWebFrameworkExampleApp\Controllers;

if ( ! class_exists( 'Controller' ) ) {

	abstract class Controller {

		private static $instances = array();
		protected $model;

		/**
		 * Provides access to a single instance of a module using the singleton pattern
		 *
		 * @return object
		 *
		 * @since    1.0.0
		 */
		public static function get_instance() {

			$classname = get_called_class();

			if ( ! isset( self::$instances[ $classname ] ) ) {
				self::$instances[ $classname ] = new $classname();
			}
			return self::$instances[ $classname ];

		}

		/**
		 * Get model
		 *
		 * @return object
		 *
		 * @since    1.0.0
		 */
		protected static function get_model() {

			return static::get_instance()->model;

		}

		/**
		 * Render a template
		 *
		 * @param  string $default_template_path The path to the template, relative to the plugin's `views` folder
		 * @param  array  $variables             An array of variables to pass into the template's scope, indexed with the variable name so that it can be extract()-ed
		 * @param  string $require               'once' to use require_once() | 'always' to use require()
		 * @return string
		 *
		 * @since    1.0.0
		 */
		protected static function render_template( $default_template_path = false, $variables = array(), $require = 'once' ){
			
			if ( ! $template_path = locate_template( basename( $default_template_path ) ) ) {
				$template_path = Application::get_plugin_path() . '/views/' . $default_template_path;
			}

			if ( is_file( $template_path ) ) {
				extract( $variables );
				ob_start();
				if ( 'always' == $require ) {
					require( $template_path );
				} else {
					require_once( $template_path );
				}
				$template_content = apply_filters( 'plugin_name_template_content', ob_get_clean(), $default_template_path, $template_path, $variables );
			} else {
				$template_content = '';
			}

			return $template_content;
		}

		/**
		 * Clears caches of content generated by caching plugins like WP Super Cache
		 *
		 * @since    1.0.0
		 */
		protected static function clear_caching_plugins() {

			// WP Super Cache
			if ( function_exists( 'wp_cache_clear_cache' ) ) {
				wp_cache_clear_cache();
			}

			// W3 Total Cache
			if ( class_exists( 'W3_Plugin_TotalCacheAdmin' ) ) {
				$w3_total_cache = w3_instance( 'W3_Plugin_TotalCacheAdmin' );
				if ( method_exists( $w3_total_cache, 'flush_all' ) ) {
					$w3_total_cache->flush_all();
				}
			}
			
		}

		/**
		 * Constructor
		 *
		 */
		abstract public function __construct();

		/**
		 * Register callbacks for actions and filters
		 * 
		 */
		abstract protected function register_hook_callbacks();

	}

}